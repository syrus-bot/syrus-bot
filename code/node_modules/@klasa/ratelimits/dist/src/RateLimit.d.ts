import { RateLimitToken } from './RateLimitToken';
import type { RateLimitManager } from './RateLimitManager';
export declare class RateLimit<K> {
    #private;
    /**
     * The RateLimitManager this Ratelimit is for
     */
    private manager;
    /**
     * @param manager The manager for this RateLimit
     */
    constructor(manager: RateLimitManager<K>);
    /**
     * Whether this RateLimit is expired or not, allowing the bucket to be reset
     */
    get expired(): boolean;
    /**
     * Whether this RateLimit is limited or not
     */
    get limited(): boolean;
    /**
     * The remaining time in milliseconds before this RateLimit instance is reset
     */
    get remainingTime(): number;
    /**
     * Consumes remaining limit from the RateLimit bucket
     */
    consume(): this;
    /**
     * Takes a token that can be returned to the bucket if something goes wrong before this resets.
     */
    take(): RateLimitToken;
    /**
     * Resets the RateLimit back to it's full state
     */
    reset(): this;
    /**
     * Resets the RateLimit's remaining uses back to full state
     */
    resetRemaining(): this;
    /**
     * Resets the RateLimit's reset time back to full state
     */
    resetTime(): this;
}
