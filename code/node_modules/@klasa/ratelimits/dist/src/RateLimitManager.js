"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RateLimitManager = void 0;
const cache_1 = require("@klasa/cache");
const timer_manager_1 = require("@klasa/timer-manager");
const RateLimit_1 = require("./RateLimit");
class RateLimitManager extends cache_1.Cache {
    /**
     * @param limit The amount of times a RateLimit can drip before it's limited.
     * @param time The amount of milliseconds for the ratelimits from this manager to expire.
     */
    constructor(time, limit = 1) {
        super();
        this.time = time;
        this.limit = limit;
    }
    /**
     * The interval to sweep expired ratelimits.
     */
    #sweepInterval;
    /**
     * Gets a RateLimit from this manager or creates it if it does not exist.
     * @param id The id for the RateLimit
     */
    acquire(id) {
        return this.get(id) || this.create(id);
    }
    /**
     * Creates a RateLimit for this manager.
     * @param id The id the RateLimit belongs to
     */
    create(id) {
        const ratelimit = new RateLimit_1.RateLimit(this);
        this.set(id, ratelimit);
        return ratelimit;
    }
    /**
     * Wraps Collection's set method to set interval to sweep inactive RateLimits.
     * @param id The id the RateLimit belongs to
     * @param ratelimit The RateLimit to set
     */
    set(id, ratelimit) {
        if (!(ratelimit instanceof RateLimit_1.RateLimit))
            throw new Error('Invalid RateLimit');
        if (!this.#sweepInterval)
            this.#sweepInterval = timer_manager_1.TimerManager.setInterval(this.sweep.bind(this), 30000);
        return super.set(id, ratelimit);
    }
    /**
     * Wraps Collection's sweep method to clear the interval when this manager is empty.
     * @param fn The filter function
     * @param thisArg The this for the sweep
     */
    sweep(fn = (rl) => rl.expired, thisArg) {
        const amount = super.sweep(fn, thisArg);
        if (this.size === 0) {
            timer_manager_1.TimerManager.clearInterval(this.#sweepInterval);
            this.#sweepInterval = null;
        }
        return amount;
    }
    static get [Symbol.species]() {
        return cache_1.Cache;
    }
}
exports.RateLimitManager = RateLimitManager;
//# sourceMappingURL=RateLimitManager.js.map