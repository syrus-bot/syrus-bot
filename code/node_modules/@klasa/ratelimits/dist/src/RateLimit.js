"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RateLimit = void 0;
const RateLimitToken_1 = require("./RateLimitToken");
class RateLimit {
    /**
     * @param manager The manager for this RateLimit
     */
    constructor(manager) {
        this.manager = manager;
        this.reset();
    }
    /**
     * The remaining times this RateLimit can be dripped before the RateLimit bucket is empty
     */
    #remaining;
    /**
     * When this RateLimit is reset back to a full state
     */
    #expires;
    /**
     * Whether this RateLimit is expired or not, allowing the bucket to be reset
     */
    get expired() {
        return this.remainingTime === 0;
    }
    /**
     * Whether this RateLimit is limited or not
     */
    get limited() {
        return !(this.#remaining > 0 || this.expired);
    }
    /**
     * The remaining time in milliseconds before this RateLimit instance is reset
     */
    get remainingTime() {
        return Math.max(this.#expires - Date.now(), 0);
    }
    /**
     * Consumes remaining limit from the RateLimit bucket
     */
    consume() {
        if (this.limited)
            throw new Error('Ratelimited');
        if (this.expired)
            this.reset();
        this.#remaining--;
        return this;
    }
    /**
     * Takes a token that can be returned to the bucket if something goes wrong before this resets.
     */
    take() {
        this.consume();
        return new RateLimitToken_1.RateLimitToken(this.#expires, () => {
            this.#remaining++;
        });
    }
    /**
     * Resets the RateLimit back to it's full state
     */
    reset() {
        return this.resetRemaining().resetTime();
    }
    /**
     * Resets the RateLimit's remaining uses back to full state
     */
    resetRemaining() {
        this.#remaining = this.manager.limit;
        return this;
    }
    /**
     * Resets the RateLimit's reset time back to full state
     */
    resetTime() {
        this.#expires = Date.now() + this.manager.time;
        return this;
    }
}
exports.RateLimit = RateLimit;
//# sourceMappingURL=RateLimit.js.map