{"version":3,"file":"index.es.mjs","sources":["../src/lib/arrayStrictEquals.ts","../src/lib/chunk.ts","../src/lib/classExtends.ts","../src/lib/codeBlock.ts","../src/lib/splitText.ts","../src/lib/cutText.ts","../src/lib/isObject.ts","../src/lib/isPrimitive.ts","../src/lib/deepClone.ts","../src/lib/inlineCodeBlock.ts","../src/lib/isClass.ts","../src/lib/isFunction.ts","../src/lib/isNullOrUndefined.ts","../src/lib/isNumber.ts","../src/lib/isThenable.ts","../src/lib/makeObject.ts","../src/lib/mergeDefault.ts","../src/lib/mergeObjects.ts","../src/lib/noop.ts","../src/lib/objectToTuples.ts","../src/lib/parseUrl.ts","../src/lib/regExpEsc.ts","../src/lib/roundNumber.ts","../src/lib/toTitleCase.ts","../src/lib/tryParse.ts"],"sourcesContent":["/**\n * Compare if both arrays are strictly equal\n * @param arr1 The array to compare to\n * @param arr2 The array to compare with\n */\nexport function arrayStrictEquals<T extends readonly unknown[]>(arr1: T, arr2: T): boolean {\n\tif (arr1 === arr2) return true;\n\tif (arr1.length !== arr2.length) return false;\n\n\tfor (let i = 0; i < arr1.length; i++) {\n\t\tif (arr1[i] !== arr2[i] || typeof arr1[i] !== typeof arr2[i]) return false;\n\t}\n\treturn true;\n}\n","/**\n * Splits up an array into chunks\n * @param array The array to chunk up\n * @param chunkSize The size of each individual chunk\n */\nexport function chunk<T>(array: readonly T[], chunkSize: number): T[][] {\n\tif (!Array.isArray(array)) throw new TypeError('entries must be an array.');\n\tif (!Number.isInteger(chunkSize)) throw new TypeError('chunkSize must be an integer.');\n\tif (chunkSize < 1) throw new RangeError('chunkSize must be 1 or greater.');\n\tconst clone: T[] = array.slice();\n\tconst chunks: T[][] = [];\n\twhile (clone.length) chunks.push(clone.splice(0, chunkSize));\n\treturn chunks;\n}\n","import type { Ctor } from './utilityTypes';\n\n/**\n * Checks whether or not the value class extends the base class.\n * @param value The constructor to be checked against.\n * @param base The base constructor.\n */\nexport function classExtends<T extends Ctor>(value: Ctor, base: T): value is T {\n\tlet ctor: Ctor | null = value;\n\twhile (ctor !== null) {\n\t\tif (ctor === base) return true;\n\t\tctor = Object.getPrototypeOf(ctor);\n\t}\n\n\treturn false;\n}\n","const zws = String.fromCharCode(8203);\n\n/**\n * Wraps text in a markdown codeblock with optionally a language indicator for syntax highlighting\n * @param language The codeblock language\n * @param expression The expression to be wrapped in the codeblock\n */\nexport function codeBlock<T extends unknown>(language: string, expression: T): string {\n\tif (typeof expression === 'string') {\n\t\tif (expression.length === 0) return `\\`\\`\\`${zws}\\`\\`\\``;\n\t\treturn `\\`\\`\\`${language}\\n${expression.replace(/```/, `\\`${zws}\\`\\``).replace(/`$/g, `\\`${zws}`)}\\`\\`\\``;\n\t}\n\treturn `\\`\\`\\`${language}\\n${expression || zws}\\`\\`\\``;\n}\n","/**\n * Split a string by its latest space character in a range from the character 0 to the selected one.\n * @param str The text to split.\n * @param length The length of the desired string.\n * @param char The character to split with\n * @copyright 2019 Antonio Román\n * @license Apache-2.0\n */\nexport function splitText(str: string, length: number, char = ' ') {\n\tconst x = str.substring(0, length).lastIndexOf(char);\n\tconst pos = x === -1 ? length : x;\n\treturn str.substring(0, pos);\n}\n","import { splitText } from './splitText';\n\n/**\n * Split a text by its latest space character in a range from the character 0 to the selected one.\n * @param str The text to split.\n * @param length The length of the desired string.\n * @copyright 2019 Antonio Román\n * @license Apache-2.0\n */\nexport function cutText(str: string, length: number) {\n\tif (str.length < length) return str;\n\tconst cut = splitText(str, length - 3);\n\tif (cut.length < length - 3) return `${cut}...`;\n\treturn `${cut.slice(0, length - 3)}...`;\n}\n","/* eslint-disable @typescript-eslint/ban-types */\n/**\n * Verify if the input is an object literal (or class).\n * @param input The object to verify\n */\nexport function isObject(input: unknown): input is Record<PropertyKey, unknown> | object {\n\treturn typeof input === 'object' && input ? input.constructor === Object : false;\n}\n","const primitiveTypes = ['string', 'bigint', 'number', 'boolean'];\n\n/**\n * Check whether a value is a primitive\n * @since 0.5.0\n * @param input The input to check\n */\nexport function isPrimitive(input: unknown): input is string | bigint | number | boolean {\n\treturn primitiveTypes.includes(typeof input);\n}\n","import { isObject } from './isObject';\nimport { isPrimitive } from './isPrimitive';\n\n/**\n * Deep clone an object\n * @param source The object to clone\n */\nexport function deepClone<T>(source: T): T {\n\t// Check if it's a primitive (with exception of function and null, which is typeof object)\n\tif (source === null || isPrimitive(source)) return source;\n\tif (Array.isArray(source)) {\n\t\tconst output = ([] as unknown) as T & T extends (infer S)[] ? S[] : never;\n\t\tfor (const value of source) output.push(deepClone(value));\n\t\treturn (output as unknown) as T;\n\t}\n\tif (isObject(source)) {\n\t\tconst output = {} as Record<PropertyKey, unknown>;\n\t\tfor (const [key, value] of Object.entries(source)) output[key] = deepClone(value);\n\t\treturn (output as unknown) as T;\n\t}\n\tif (source instanceof Map) {\n\t\tconst output = (new (source.constructor as MapConstructor)() as unknown) as T & T extends Map<infer K, infer V> ? Map<K, V> : never;\n\t\tfor (const [key, value] of source.entries()) output.set(key, deepClone(value));\n\t\treturn (output as unknown) as T;\n\t}\n\tif (source instanceof Set) {\n\t\tconst output = (new (source.constructor as SetConstructor)() as unknown) as T & T extends Set<infer K> ? Set<K> : never;\n\t\tfor (const value of source.values()) output.add(deepClone(value));\n\t\treturn (output as unknown) as T;\n\t}\n\treturn source;\n}\n","const zws = String.fromCharCode(8203);\n\n/**\n * Wraps text in a markdown inline codeblock\n * @param expression The expression to be wrapped in the codeblock\n */\nexport function inlineCodeBlock(input: string): string {\n\treturn `\\`${input.replace(/ /g, '\\u00A0').replace(/`/g, `\\`${zws}`)}\\``;\n}\n","import type { Ctor } from './utilityTypes';\n\n/**\n * Verify if the input is a class constructor.\n * @param input The function to verify\n */\nexport function isClass(input: unknown): input is Ctor {\n\treturn typeof input === 'function' && typeof input.prototype === 'object';\n}\n","/**\n * Verify if the input is a function.\n * @param input The function to verify\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport function isFunction(input: unknown): input is Function {\n\treturn typeof input === 'function';\n}\n","/**\n * Checks whether or not a value is null or undefined\n * @param value The value to check\n */\nexport function isNullOrUndefined(value: unknown): value is undefined | null {\n\treturn value === undefined || value === null;\n}\n","/**\n * Verify if a number is a finite number.\n * @param input The number to verify\n */\nexport function isNumber(input: unknown): input is number {\n\treturn typeof input === 'number' && !isNaN(input) && Number.isFinite(input);\n}\n","/* eslint-disable @typescript-eslint/ban-types */\nimport { isFunction } from './isFunction';\n\nexport interface Thenable {\n\tthen: Function;\n\tcatch: Function;\n}\n\nfunction hasThen(input: { then?: Function }): boolean {\n\treturn Reflect.has(input, 'then') && isFunction(input.then);\n}\n\nfunction hasCatch(input: { catch?: Function }): boolean {\n\treturn Reflect.has(input, 'catch') && isFunction(input.catch);\n}\n\n/**\n * Verify if an object is a promise.\n * @param input The promise to verify\n */\nexport function isThenable(input: unknown): input is Thenable {\n\tif (typeof input !== 'object' || input === null) return false;\n\treturn input instanceof Promise || (input !== Promise.prototype && hasThen(input) && hasCatch(input));\n}\n","/**\n * Turn a dotted path into a json object.\n * @param path The dotted path\n * @param value The value\n * @param obj The object to edit\n */\nexport function makeObject(path: string, value: unknown, obj: Record<string, unknown> = {}): Record<string, unknown> {\n\tif (path.includes('.')) {\n\t\tconst route = path.split('.');\n\t\tconst lastKey = route.pop() as string;\n\t\tlet reference = obj;\n\t\tfor (const key of route) {\n\t\t\tif (!reference[key]) reference[key] = {};\n\t\t\treference = reference[key] as Record<string, unknown>;\n\t\t}\n\t\treference[lastKey] = value;\n\t} else {\n\t\tobj[path] = value;\n\t}\n\treturn obj;\n}\n","import { deepClone } from './deepClone';\nimport { isObject } from './isObject';\n\nimport type { DeepRequired } from './utilityTypes';\n\n// eslint-disable-next-line @typescript-eslint/consistent-type-definitions, @typescript-eslint/ban-types\ntype NonNullObject = {};\n\n/**\n * Sets default properties on an object that aren't already specified.\n * @since 0.5.0\n * @param def Default properties\n * @param given Object to assign defaults to\n */\nexport function mergeDefault<A extends NonNullObject, B extends Partial<A>>(defaults: A, given?: B): DeepRequired<A & B> {\n\tif (!given) return deepClone(defaults) as DeepRequired<A & B>;\n\tfor (const [key, value] of Object.entries(defaults)) {\n\t\tconst givenValue = Reflect.get(given, key);\n\t\tif (typeof givenValue === 'undefined') {\n\t\t\tReflect.set(given, key, deepClone(value));\n\t\t} else if (isObject(givenValue)) {\n\t\t\tReflect.set(given, key, mergeDefault(value as NonNullObject, givenValue));\n\t\t}\n\t}\n\n\treturn given as DeepRequired<A & B>;\n}\n","/* eslint-disable @typescript-eslint/ban-types */\nimport { isObject } from './isObject';\n\n/**\n * Merges two objects\n * @param objTarget The object to be merged\n * @param objSource The object to merge\n */\nexport function mergeObjects<A extends object, B extends object>(objTarget: A, objSource: Readonly<B>): A & B {\n\tfor (const [key, value] of Object.entries(objSource)) {\n\t\tconst targetValue = Reflect.get(objTarget, key);\n\t\tif (isObject(value)) {\n\t\t\tReflect.set(objTarget, key, isObject(targetValue) ? mergeObjects(targetValue, value as object) : value);\n\t\t} else if (!isObject(targetValue)) {\n\t\t\tReflect.set(objTarget, key, value);\n\t\t}\n\t}\n\n\treturn objTarget as A & B;\n}\n","// eslint-disable-next-line @typescript-eslint/no-empty-function\nexport function noop() {}\n","import { isObject } from './isObject';\n\n/**\n * Convert an object to a tuple\n * @param value The object to convert\n * @param prefix The prefix for the key\n */\nexport function objectToTuples(original: Record<string, unknown>, prefix = ''): [string, unknown][] {\n\tconst entries: [string, unknown][] = [];\n\tfor (const [key, value] of Object.entries(original)) {\n\t\tif (isObject(value)) {\n\t\t\tentries.push(...objectToTuples(value as Record<string, unknown>, `${prefix}${key}.`));\n\t\t} else {\n\t\t\tentries.push([`${prefix}${key}`, value]);\n\t\t}\n\t}\n\n\treturn entries;\n}\n","/**\n * Parses an URL, returns null if invalid.\n * @param url The url to parse\n */\nexport function parseURL(url: string) {\n\ttry {\n\t\t// @ts-expect-error URL is globally available in NodeJS and browsers\n\t\treturn new URL(url);\n\t} catch {\n\t\treturn null;\n\t}\n}\n","// eslint-disable-next-line @typescript-eslint/naming-convention\nconst REGEXPESC = /[-/\\\\^$*+?.()|[\\]{}]/g;\n\n/**\n * Cleans a string from regex injection\n * @since 0.0.1\n * @param str The string to clean\n */\nexport function regExpEsc(str: string): string {\n\treturn str.replace(REGEXPESC, '\\\\$&');\n}\n","/**\n * Properly rounds up or down a number.\n * Also supports strings using an exponent to indicate large or small numbers.\n * @param num The number to round off\n * @param scale The amount of decimals to retain\n */\nexport function roundNumber(num: number | string, scale = 0) {\n\tif (!num.toString().includes('e')) {\n\t\treturn Number(`${Math.round(Number(`${num}e+${scale}`))}e-${scale}`);\n\t}\n\tconst arr = `${num}`.split('e');\n\tlet sig = '';\n\n\tif (Number(arr[1]) + scale > 0) {\n\t\tsig = '+';\n\t}\n\n\treturn Number(`${Math.round(Number(`${Number(arr[0])}e${sig}${Number(arr[1]) + scale}`))}e-${scale}`);\n}\n","// eslint-disable-next-line @typescript-eslint/naming-convention\nconst TOTITLECASE = /[A-Za-zÀ-ÖØ-öø-ÿ]\\S*/g;\nconst titleCaseVariants: Record<string, string> = {\n\ttextchannel: 'TextChannel',\n\tvoicechannel: 'VoiceChannel',\n\tcategorychannel: 'CategoryChannel',\n\tguildmember: 'GuildMember'\n};\n\n/**\n * Converts a string to Title Case\n * @description This is designed to also ensure common Discord PascalCased strings\n * \t\t\t\tare put in their TitleCase titleCaseVariants. See below for the full list.\n * @param str The string to title case\n * @terms\n * This table lists how certain terms are converted, these are case insensitive.\n * Any terms not included are converted to regular Titlecase.\n *\n *      | Term            |    Converted To |\n *      |-----------------|-----------------|\n *      | textchannel     |     TextChannel |\n *      | voicechannel    |    VoiceChannel |\n *      | categorychannel | CategoryChannel |\n *      | guildmember     |     GuildMember |\n */\nexport function toTitleCase(str: string): string {\n\treturn str.replace(TOTITLECASE, (txt) => titleCaseVariants[txt] || txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase());\n}\n","/* eslint-disable @typescript-eslint/ban-types */\n/**\n * Try parse a stringified JSON string.\n * @param value The value to parse\n */\nexport function tryParse(value: string): object | string {\n\ttry {\n\t\treturn JSON.parse(value);\n\t} catch (err) {\n\t\treturn value;\n\t}\n}\n"],"names":["arrayStrictEquals","arr1","arr2","length","i","chunk","array","chunkSize","Array","isArray","TypeError","Number","isInteger","RangeError","clone","slice","chunks","push","splice","classExtends","value","base","ctor","Object","getPrototypeOf","zws","String","fromCharCode","codeBlock","language","expression","replace","splitText","str","char","x","substring","lastIndexOf","pos","cutText","cut","isObject","input","constructor","primitiveTypes","isPrimitive","includes","deepClone","source","output","key","entries","Map","set","Set","values","add","inlineCodeBlock","isClass","prototype","isFunction","isNullOrUndefined","isNumber","isNaN","isFinite","isThenable","Promise","Reflect","has","then","hasThen","catch","hasCatch","makeObject","path","obj","route","split","lastKey","pop","reference","mergeDefault","defaults","given","givenValue","get","mergeObjects","objTarget","objSource","targetValue","noop","objectToTuples","original","prefix","parseURL","url","URL","REGEXPESC","regExpEsc","roundNumber","num","scale","toString","Math","round","arr","sig","TOTITLECASE","titleCaseVariants","textchannel","voicechannel","categorychannel","guildmember","toTitleCase","txt","charAt","toUpperCase","substr","toLowerCase","tryParse","JSON","parse","err"],"mappings":"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"}