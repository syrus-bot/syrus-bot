import { Plugin, preInitialization, preLogin, SapphireClient } from '@sapphire/framework';
import { Awaited } from '@sapphire/pieces';
import { ClientOptions, Message } from 'discord.js';
import { InitOptions } from 'i18next';
import { i18nextFsBackend } from 'i18next-fs-backend';
export declare class In17n extends Plugin {
    static [preInitialization](this: SapphireClient, _options: ClientOptions): void;
    static [preLogin](this: SapphireClient, _options: ClientOptions): Promise<void>;
}
export interface In17nFetchLanguage {
    (message: Message): Awaited<string | null>;
}
declare module 'discord.js' {
    interface Client {
        /**
         * The method to be overriden by the developer.
         * Note: In the event that fetchLanguage is not defined or returns null or undefined
         * the order of defaulting will be as follows:
         * client.fetchLanguage -> message.guild.preferredLocale -> this.client.options.i18n.defaultName -> 'en-US'
         * @since 1.0.0
         * @return A string for the desired language or null for no match.
         * @example
         * ```typescript
         * // Return always the same language (unconfigurable):
         * client.fetchLanguage = () => 'en-US';
         * ```
         * @example
         * ```typescript
         * // Retrieving the prefix from a SQL database:
         * client.fetchLanguage = async (message) => {
         *   const guild = await driver.getOne('SELECT language FROM public.guild WHERE id = $1', [message.guild.id]);
         *   return guild?.language ?? 'en-US';
         * };
         * ```
         * @example
         * ```typescript
         * // Retrieving the language from an ORM:
         * client.fetchLanguage = async (message) => {
         *   const guild = await driver.getRepository(GuildEntity).findOne({ id: message.guild.id });
         *   return guild?.language ?? 'en-US';
         * };
         * ```
         */
        fetchLanguage: In17nFetchLanguage;
    }
}
declare module '@sapphire/framework' {
    interface ClientInternationalizationOptions {
        /**
         * The options passed to `backend` in `i18next.init`.
         * @since 1.0.0
         */
        backend?: i18nextFsBackend.i18nextFsBackendOptions;
        /**
         * The options passed to `i18next.init`.
         * @since 1.0.0
         */
        i18next?: InitOptions;
        /**
         * The directory in which "i18next-fs-backend" should search for files.
         * Defaulted to "<rootDirectory>/languages".
         * @since 1.0.0
         */
        defaultLanguageDirectory?: string;
        /**
         * The default value to be used if a specific language key isnt found.
         * Defaulted to "default:default".
         * @since 1.0.0
         */
        defaultMissingKey?: string;
        /**
         * The default NS that is prefixed to all keys that dont specify it.
         * Defaulted to "default".
         * @since 1.0.0
         */
        defaultNS?: string;
    }
}
//# sourceMappingURL=In17n.d.ts.map