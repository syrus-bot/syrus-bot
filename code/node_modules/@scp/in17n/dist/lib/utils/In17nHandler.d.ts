import { IInternationalization, SapphireClient } from '@sapphire/framework';
import { Awaited } from '@sapphire/utilities';
import { Collection, Message } from 'discord.js';
import { StringMap, TFunction, TOptions } from 'i18next';
export declare class In17nHandler implements IInternationalization {
    private readonly client;
    /**
     * Describes whether `In17nHandler#init` has been run and languages are loaded in `In17nHandler.languages`.
     * @since 1.0.0
     */
    languagesLoaded: boolean;
    /**
     * A `Collection` of "i18next" language functions keyed by their language code.
     * @since 1.0.0
     */
    languages: Collection<string, TFunction>;
    private readonly languagesDir;
    private readonly backendOptions;
    constructor(client: SapphireClient);
    init(): Promise<void>;
    /**
     * Resolves the language from the message. The resolution order is at follows:
     * client.fetchLanguage -> message.guild.preferredLocale -> this.client.options.i18n.defaultName -> 'en-US'
     * @param message The message from which the language should be resolved.
     * @since 1.0.0
     */
    resolveNameFromMessage(message: Message): Promise<string>;
    /**
     * Resolves a localised string from a language, key, optional replaceables, and optional i18next options.
     * @param name The language to be used.
     * @param key The key that should be translated.
     * @param replace The replaceable keys in translation string.
     * @param options i18next language options.
     * @since 1.0.0
     */
    resolveValue(name: string, key: string, replace?: Record<string, unknown>, options?: TOptions<StringMap>): Awaited<string>;
    walkLanguageDirectory(dir: string, namespaces?: string[], folderName?: string): Promise<{
        namespaces: string[];
        languages: string[];
    }>;
}
//# sourceMappingURL=In17nHandler.d.ts.map